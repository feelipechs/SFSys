export async function up(queryInterface, Sequelize) {
  await queryInterface.createTable('distribution_item', {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true,
      allowNull: false,
    },
    // Chave Estrangeira para a Distribui√ß√£o (o evento de entrega)
    distribution_id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      references: { model: 'distribution', key: 'id' },
      onUpdate: 'CASCADE',
      onDelete: 'CASCADE', // Se a Distribui√ß√£o sumir, o registro do item deve sumir.
    },
    // Chave Estrangeira para o Produto (o item que saiu do estoque)
    product_id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      references: { model: 'product', key: 'id' },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT', // N√£o permite excluir um produto que j√° foi distribu√≠do.
    },
    // A quantidade do produto distribu√≠da
    quantity: {
      type: Sequelize.DECIMAL(10, 2),
      allowNull: false,
    },
    // Colunas padr√£o de rastreamento
    created_at: { type: Sequelize.DATE, allowNull: false },
    updated_at: { type: Sequelize.DATE, allowNull: false },
  });

  // üü¢ Dica: Adiciona uma restri√ß√£o de unicidade composta
  // Garante que um produto n√£o seja listado duas vezes na mesma distribui√ß√£o.
  await queryInterface.addConstraint('distribution_item', {
    fields: ['distribution_id', 'product_id'],
    type: 'unique',
    name: 'unique_distribution_product_constraint',
  });
}

export async function down(queryInterface) {
  await queryInterface.dropTable('distribution_item');
}
